# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create-virtualenv:
    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          pip install -U pip
          poetry install --no-interaction --no-root
          
  linter:
    needs: create-virtualenv
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - uses: actions/cache@v2
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ hashFiles('**/poetry.lock') }}
    - name: Install pre-commit
      run: |
        source .venv/bin/activate
        export PATH=$PATH:/root/.local/bin
        pip3 install pre_commit
        python3 -m pre_commit install
    - name: flake8
      run: |
        source .venv/bin/activate
        python3 -m pre_commit run flake8 --all-files
    - name: isort
      run: |
        source .venv/bin/activate
        python3 -m pre_commit run isort --all-files
          
  tests:
    needs: create-virtualenv
    runs-on: ubuntu-20.04
    services:
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - uses: actions/cache@v2
      id: cached-poetry-dependencies
      with:
        path: .venv
        key: venv-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install
      
    - name: Run tests
      env:
        # The hostname used to communicate with the Redis service container
        REDIS_HOST: localhost
        # The default Redis port
        REDIS_PORT: 6379
      run: CONFIG_CENTER_ENABLED=False poetry run python -m pytest tests/
      
